images_digits_0_9[digit + 1, ] <- images_digits_0_9[digit + 1, ]/max(images_digits_0_9[digit + 1, ]) * 255
z <- array(images_digits_0_9[digit + 1, ], dim = c(28, 28))
z <- z[, 28:1]
image(1:28, 1:28, z, main = digit, col = CUSTOM_BNW(256))
}
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
rm(list = ls())
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
test_orig <- test
print("started modelling...")
rf_model <- randomForest(data = train, label ~ ., ntree = 20, do.trace = 1)
rf_model
rm(list = ls())
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
test_orig <- test
library(caret)
nzv.data <- nearZeroVar(train, saveMetrics = TRUE)
drop.cols <- rownames(nzv.data)[nzv.data$nzv == TRUE]
train <- train[,!names(train) %in% drop.cols]
test <- test[,!names(test) %in% drop.cols]
library(RColorBrewer)
BNW <- c("white", "black")
CUSTOM_BNW <- colorRampPalette(colors = BNW)
par(mfrow = c(4, 3), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
images_digits_0_9 <- array(dim = c(10, 28 * 28))
for (digit in 0:9) {
images_digits_0_9[digit + 1, ] <- apply(train_orig[train_orig[, 1] == digit, -1], 2, sum)
images_digits_0_9[digit + 1, ] <- images_digits_0_9[digit + 1, ]/max(images_digits_0_9[digit + 1, ]) * 255
z <- array(images_digits_0_9[digit + 1, ], dim = c(28, 28))
z <- z[, 28:1]
image(1:28, 1:28, z, main = digit, col = CUSTOM_BNW(256))
}
rm(list = ls())
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
test_orig <- test
library(RColorBrewer)
BNW <- c("white", "black")
CUSTOM_BNW <- colorRampPalette(colors = BNW)
par(mfrow = c(4, 3), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
images_digits_0_9 <- array(dim = c(10, 28 * 28))
for (digit in 0:9) {
images_digits_0_9[digit + 1, ] <- apply(train_orig[train_orig[, 1] == digit, -1], 2, sum)
images_digits_0_9[digit + 1, ] <- images_digits_0_9[digit + 1, ]/max(images_digits_0_9[digit + 1, ]) * 255
z <- array(images_digits_0_9[digit + 1, ], dim = c(28, 28))
z <- z[, 28:1]
image(1:28, 1:28, z, main = digit, col = CUSTOM_BNW(256))
}
rm(list = ls())
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
test_orig <- test
library(RColorBrewer)
BNW <- c("white", "black")
CUSTOM_BNW <- colorRampPalette(colors = BNW)
par(mfrow = c(4, 3), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
images_digits_0_9 <- array(dim = c(10, 28 * 28))
for (digit in 0:9) {
images_digits_0_9[digit + 1, ] <- apply(train_orig[train_orig[, 1] == digit, -1], 2, sum)
images_digits_0_9[digit + 1, ] <- images_digits_0_9[digit + 1, ]/max(images_digits_0_9[digit + 1, ]) * 255
z <- array(images_digits_0_9[digit + 1, ], dim = c(28, 28))
z <- z[, 28:1]
image(1:28, 1:28, z, main = digit, col = CUSTOM_BNW(256))
}
print("started modelling...")
rf_model <- randomForest(data = train, label ~ ., ntree = 20, do.trace = 1)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
rm(list = ls())
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
print("started modelling...")
rf_model <- randomForest(data = train, label ~ ., ntree = 20, do.trace = 1)
rf_model
rm(list = ls())
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
rf_model <- randomForest(data = train, label ~ ., ntree = 20, do.trace = 1)
rf_model
rf_model <- randomForest(data = train, label ~ ., ntree = 20, do.trace = 10)
rf_model
rf_model <- randomForest(data = train, label ~ ., ntree = 10, do.trace = 10)
rf_model
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
rm(list = ls())
library(readr)
train <- read_csv("train-kaggle.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
rm(list = ls())
library(readr)
train <- read_csv("trainL.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
train <- read_csv("reduction.csv")
rm(list = ls())
library(readr)
train <- read_csv("reduction.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
print("started modelling...")
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rm(list = ls())
library(readr)
train <- read_csv("reduction.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
rm(list = ls())
library(readr)
train <- read_csv("reduction.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
print("started modelling...")
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
rm(list = ls())
library(readr)
train <- read_csv("reduction.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
print("started modelling...")
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
library(readr)
train <- read_csv("train-kaggle.csv")
test <- read_csv("test.csv")
rm(list = ls())
library(readr)
train <- read_csv("train-kaggle.csv")
test <- read_csv("test.csv")
print("started modelling...")
rf_model <- randomForest(data = train, label ~ ., ntree = 20, do.trace = 1)
rf_model <- randomForest(data = train, label ~ ., ntree = 20, do.trace = 10)
rm(list = ls())
library(readr)
train <- read_csv("reduction.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
print("started modelling...")
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
library("randomForest", lib.loc="~/R/win-library/3.4")
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("reduction.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
print("started modelling...")
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("reduction.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
train <- train[1:40000,]
test <- traing[40001,42000]
train <- read_csv("reduction.csv")
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("reduction.csv")
n
train <- train[1:40000,]
test <- traing[40001:42000,]
test <- train[40001:42000,]
train[, 1] <- as.factor(train[, 1]$label)  # As Category
test <- train[40001:42000,2:197]
train[, 1] <- as.factor(train[, 1]$label)  # As Category
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
pred_df
pred
test <- train[40001:42000,]
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
pred
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("reduction.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
test_orig <- test
library(caret)
nzv.data <- nearZeroVar(train, saveMetrics = TRUE)
drop.cols <- rownames(nzv.data)[nzv.data$nzv == TRUE]
train <- train[,!names(train) %in% drop.cols]
test <- test[,!names(test) %in% drop.cols]
print("started modelling...")
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
pred
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
#explorations
library(RColorBrewer)
list
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("reduction.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
"train_orig <- train
test_orig <- test
library(caret)
nzv.data <- nearZeroVar(train, saveMetrics = TRUE)
drop.cols <- rownames(nzv.data)[nzv.data$nzv == TRUE]
train <- train[,!names(train) %in% drop.cols]
test <- test[,!names(test) %in% drop.cols]"
#explorations
library(RColorBrewer)
BNW <- c("white", "black")
CUSTOM_BNW <- colorRampPalette(colors = BNW)
par(mfrow = c(4, 3), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
images_digits_0_9 <- array(dim = c(10, 14 * 14))
for (digit in 0:9) {
images_digits_0_9[digit + 1, ] <- apply(train_orig[train_orig[, 1] == digit, -1], 2, sum)
images_digits_0_9[digit + 1, ] <- images_digits_0_9[digit + 1, ]/max(images_digits_0_9[digit + 1, ]) * 255
z <- array(images_digits_0_9[digit + 1, ], dim = c(14, 14))
z <- z[, 14:1]
image(1:14, 1:14, z, main = digit, col = CUSTOM_BNW(196))
}
#remove zeros
train_orig <- train
test_orig <- test
for (digit in 0:9) {
images_digits_0_9[digit + 1, ] <- apply(train_orig[train_orig[, 1] == digit, -1], 2, sum)
images_digits_0_9[digit + 1, ] <- images_digits_0_9[digit + 1, ]/max(images_digits_0_9[digit + 1, ]) * 255
z <- array(images_digits_0_9[digit + 1, ], dim = c(14, 14))
z <- z[, 14:1]
image(1:14, 1:14, z, main = digit, col = CUSTOM_BNW(196))
}
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
test_orig <- test
library(caret)
"nzv.data <- nearZeroVar(train, saveMetrics = TRUE)
drop.cols <- rownames(nzv.data)[nzv.data$nzv == TRUE]
train <- train[,!names(train) %in% drop.cols]
test <- test[,!names(test) %in% drop.cols]"
#explorations
library(RColorBrewer)
BNW <- c("white", "black")
CUSTOM_BNW <- colorRampPalette(colors = BNW)
par(mfrow = c(4, 3), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
images_digits_0_9 <- array(dim = c(10, 14 * 14))
for (digit in 0:9) {
images_digits_0_9[digit + 1, ] <- apply(train_orig[train_orig[, 1] == digit, -1], 2, sum)
images_digits_0_9[digit + 1, ] <- images_digits_0_9[digit + 1, ]/max(images_digits_0_9[digit + 1, ]) * 255
z <- array(images_digits_0_9[digit + 1, ], dim = c(14, 14))
z <- z[, 14:1]
image(1:14, 1:14, z, main = digit, col = CUSTOM_BNW(196))
}
print("started modelling...")
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
pred
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
test_orig <- test
library(caret)
"nzv.data <- nearZeroVar(train, saveMetrics = TRUE)
drop.cols <- rownames(nzv.data)[nzv.data$nzv == TRUE]
train <- train[,!names(train) %in% drop.cols]
test <- test[,!names(test) %in% drop.cols]"
#explorations
library(RColorBrewer)
BNW <- c("white", "black")
CUSTOM_BNW <- colorRampPalette(colors = BNW)
par(mfrow = c(4, 3), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
images_digits_0_9 <- array(dim = c(10, 14 * 14))
for (digit in 0:9) {
images_digits_0_9[digit + 1, ] <- apply(train_orig[train_orig[, 1] == digit, -1], 2, sum)
images_digits_0_9[digit + 1, ] <- images_digits_0_9[digit + 1, ]/max(images_digits_0_9[digit + 1, ]) * 255
z <- array(images_digits_0_9[digit + 1, ], dim = c(14, 14))
z <- z[, 14:1]
image(1:14, 1:14, z, main = digit, col = CUSTOM_BNW(196))
}
library("randomForest", lib.loc="~/R/win-library/3.4")
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
test_orig <- test
library(caret)
"nzv.data <- nearZeroVar(train, saveMetrics = TRUE)
drop.cols <- rownames(nzv.data)[nzv.data$nzv == TRUE]
train <- train[,!names(train) %in% drop.cols]
test <- test[,!names(test) %in% drop.cols]"
#explorations
library(RColorBrewer)
BNW <- c("white", "black")
CUSTOM_BNW <- colorRampPalette(colors = BNW)
par(mfrow = c(4, 3), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
images_digits_0_9 <- array(dim = c(10, 14 * 14))
for (digit in 0:9) {
images_digits_0_9[digit + 1, ] <- apply(train_orig[train_orig[, 1] == digit, -1], 2, sum)
images_digits_0_9[digit + 1, ] <- images_digits_0_9[digit + 1, ]/max(images_digits_0_9[digit + 1, ]) * 255
z <- array(images_digits_0_9[digit + 1, ], dim = c(14, 14))
z <- z[, 14:1]
image(1:14, 1:14, z, main = digit, col = CUSTOM_BNW(196))
}
train [1]
train [,1]
train [1,]
train [2,]
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
pred
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train = pd.read_csv("train-kaggle.csv")
train = pd.read_csv("train-kaggle.csv")
train <- read_csv("train-kaggle.csv")
test <- read_csv("test.csv")
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("solution.csv")
test <- read_csv("solution_test.csv")
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("solution.csv")
test <- read_csv("solution_test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
pred
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("solution.csv")
test <- read_csv("solution_test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
print("random forest trained.")
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
pred
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("solution.csv")
test <- read_csv("solution_test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("solution.csv")
test <- read_csv("solution_test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
pred <- predict(rf_model, newdata = test)
pred_df <- data.frame(ImageId = 1:28000, Label = pred )
write.csv(pred_df, file = "randomForestResult.csv", row.names = FALSE)
rf_model
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("solution.csv")
test <- read_csv("solution_test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
#remove zeros
train_orig <- train
test_orig <- test
#explorations
library(RColorBrewer)
BNW <- c("white", "black")
CUSTOM_BNW <- colorRampPalette(colors = BNW)
par(mfrow = c(4, 3), pty = "s", mar = c(1, 1, 1, 1), xaxt = "n", yaxt = "n")
images_digits_0_9 <- array(dim = c(10, 14 * 14))
for (digit in 0:9) {
images_digits_0_9[digit + 1, ] <- apply(train_orig[train_orig[, 1] == digit, -1], 2, sum)
images_digits_0_9[digit + 1, ] <- images_digits_0_9[digit + 1, ]/max(images_digits_0_9[digit + 1, ]) * 255
z <- array(images_digits_0_9[digit + 1, ], dim = c(14, 14))
z <- z[, 14:1]
image(1:14, 1:14, z, main = digit, col = CUSTOM_BNW(196))
}
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rf_model
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
rm(list = ls())
library("randomForest", lib.loc="~/R/win-library/3.4")
library(readr)
train <- read_csv("grises_out.csv")
test <- read_csv("test.csv")
train[, 1] <- as.factor(train[, 1]$label)  # As Category
rf_model <- randomForest(data = train, label ~ ., ntree = 30, do.trace = 10)
